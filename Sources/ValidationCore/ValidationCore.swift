import base45_swift
import CocoaLumberjackSwift
import Gzip
#if canImport(UIKit)
import UIKit
#else
import Foundation
#endif

/// Electronic Health Certificate Validation Core
///
/// This struct provides an interface for validating EHN Health certificates generated by https://dev.a-sit.at/certservice
public struct ValidationCore {
    private static let DEFAULT_TRUSTLIST_URL = "https://dgc.a-sit.at/ehn/cert/listv2"
    private static let DEFAULT_SIGNATURE_URL = "https://dgc.a-sit.at/ehn/cert/sigv2"
    private static let DEFAULT_TRUSTANCHOR = """
    MIIBJTCBy6ADAgECAgUAwvEVkzAKBggqhkjOPQQDAjAQMQ4wDAYDVQQDDAVFQy1N
    ZTAeFw0yMTA0MjMxMTI3NDhaFw0yMTA1MjMxMTI3NDhaMBAxDjAMBgNVBAMMBUVD
    LU1lMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE/OV5UfYrtE140ztF9jOgnux1
    oyNO8Bss4377E/kDhp9EzFZdsgaztfT+wvA29b7rSb2EsHJrr8aQdn3/1ynte6MS
    MBAwDgYDVR0PAQH/BAQDAgWgMAoGCCqGSM49BAMCA0kAMEYCIQC51XwstjIBH10S
    N701EnxWGK3gIgPaUgBN+ljZAs76zQIhAODq4TJ2qAPpFc1FIUOvvlycGJ6QVxNX
    EkhRcgdlVfUb
    """.replacingOccurrences(of: "\n", with: "")
    private let PREFIX = "HC1:"

    private var completionHandler : ((ValidationResult) -> ())?
    #if canImport(UIKit)
    private var scanner : QrCodeScanner?
    #endif
    private let trustlistService : TrustlistService
    private let dateService : DateService

    public init(trustlistService: TrustlistService? = nil, dateService: DateService? = nil, trustlistUrl: String? = nil, signatureUrl: String? = nil, trustAnchor : String? = nil){
        let dateService = dateService ?? DefaultDateService()
        self.dateService = dateService
        self.trustlistService = trustlistService ?? DefaultTrustlistService(dateService: dateService, trustlistUrl: trustlistUrl ?? ValidationCore.DEFAULT_TRUSTLIST_URL, signatureUrl: signatureUrl ?? ValidationCore.DEFAULT_SIGNATURE_URL, trustAnchor: trustAnchor ?? ValidationCore.DEFAULT_TRUSTANCHOR)
        DDLog.add(DDOSLogger.sharedInstance)
   }

    //MARK: - Public API
    
    #if canImport(UIKit)
    /// Instantiate a QR code scanner and validate the scannned EHN health certificate
    public mutating func validateQrCode(_ qrView : UIView, _ completionHandler: @escaping (ValidationResult) -> ()){
        self.completionHandler = completionHandler
        self.scanner = QrCodeScanner()
        scanner?.scan(qrView, self)
    }
    #endif

    func decodeCwtAndCose(encodedData: String) -> Result<(keyId: Data, cwt: CWT, cose: Cose), ValidationError> {
        DDLogInfo("Starting validation")
        guard let unprefixedEncodedString = removeScheme(prefix: PREFIX, from: encodedData) else {
            return .failure(.INVALID_SCHEME_PREFIX)
        }

        guard let decodedData = decode(unprefixedEncodedString) else {
            return .failure(.BASE_45_DECODING_FAILED)
        }
        DDLogDebug("Base45-decoded data: \(decodedData.humanReadable())")

        guard let decompressedData = decompress(decodedData) else {
            return .failure(.DECOMPRESSION_FAILED)
        }
        DDLogDebug("Decompressed data: \(decompressedData.humanReadable())")

        guard let cose = cose(from: decompressedData),
              let keyId = cose.keyId else {
            return .failure(.COSE_DESERIALIZATION_FAILED)
        }
        DDLogDebug("KeyID: \(keyId.encode())")

        guard let cwt = CWT(from: cose.payload),
              let _ = cwt.euHealthCert else {
            return .failure(.CBOR_DESERIALIZATION_FAILED)
        }

        return .success((keyId, cwt, cose))
    }

    public func decodeCwt(encodedData: String) -> Result<CWT, ValidationError> {
        let cwtAndCose = decodeCwtAndCose(encodedData: encodedData)

        switch cwtAndCose {
            case .failure(let error): return .failure(error)
            case .success(let result): return .success(result.cwt)
        }
    }
    
    /// Validate an Base45-encoded EHN health certificate
    public func validate(encodedData: String, _ completionHandler: @escaping (ValidationResult) -> ()) {
        let cwtResult = decodeCwtAndCose(encodedData: encodedData)

        if case .failure(let error) = cwtResult {
            completionHandler(ValidationResult(isValid: false, metaInformation: nil, greenpass: nil, error: error))
            return
        }

        if case .success(let decodingResult) = cwtResult {
            guard decodingResult.cwt.isValid(using: dateService) else {
                completionHandler(ValidationResult(isValid: false, metaInformation: MetaInfo(from: decodingResult.cwt), greenpass: decodingResult.cwt.euHealthCert!, error: .CWT_EXPIRED))
                return
            }

            trustlistService.key(for: decodingResult.keyId, cwt: decodingResult.cwt, keyType: decodingResult.cwt.euHealthCert!.type) { result in
                switch result {
                case .success(let key):
                    let isSignatureValid = decodingResult.cose.hasValidSignature(for: key)
                    completionHandler(ValidationResult(isValid: isSignatureValid, metaInformation: MetaInfo(from: decodingResult.cwt), greenpass: decodingResult.cwt.euHealthCert!, error: isSignatureValid ? nil : .SIGNATURE_INVALID))
                case .failure(let error): completionHandler(ValidationResult(isValid: false, metaInformation: MetaInfo(from: decodingResult.cwt), greenpass: decodingResult.cwt.euHealthCert!, error: error))
                }
            }
        }
    }

    public func updateTrustlist(completionHandler: @escaping (ValidationError?)->()) {
        trustlistService.updateTrustlistIfNecessary(completionHandler: completionHandler)
    }

    //MARK: - Helper Functions

    /// Strips a given scheme prefix from the encoded EHN health certificate
    private func removeScheme(prefix: String, from encodedString: String) -> String? {
        guard encodedString.starts(with: prefix) else {
            DDLogError("Encoded data string does not seem to include scheme prefix: \(encodedString.prefix(prefix.count))")
            return nil
        }
        return String(encodedString.dropFirst(prefix.count))
    }
    
    /// Base45-decodes an EHN health certificate
    private func decode(_ encodedData: String) -> Data? {
        return try? encodedData.fromBase45()
    }
    
    /// Decompress the EHN health certificate using ZLib
    private func decompress(_ encodedData: Data) -> Data? {
        return try? encodedData.gunzipped()
    }

    /// Creates COSE structure from EHN health certificate
    private func cose(from data: Data) -> Cose? {
       return Cose(from: data)
    }
    
}

// MARK: - QrCodeReceiver
#if canImport(UIKit)
extension ValidationCore : QrCodeReceiver {
    public func canceled() {
        DDLogDebug("QR code scanning cancelled.")
        completionHandler?(ValidationResult(isValid: false, metaInformation: nil, greenpass: nil, error: .USER_CANCELLED))
    }
    
    /// Process the scanned EHN health certificate
    public func onQrCodeResult(_ result: String?) {
        guard let result = result,
              let completionHandler = self.completionHandler else {
            DDLogError("Cannot read QR code.")
            self.completionHandler?(ValidationResult(isValid: false, metaInformation: nil, greenpass: nil, error: .QR_CODE_ERROR))
            return
        }
        validate(encodedData: result, completionHandler)
    }
}
#endif


